using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Solution {

    // Complete the queensAttack function below.
    static int queensAttack(int n, int k, int r_q, int c_q, int[][] obstacles) {
        //r_q = queen row, c_q queen column, n = board size, k = num of obsticles
        int count = 0; // number of free rows
        int b = 0; // int for loops
        int[] traps = new int[4]; // traps for x-+ and y-+
        int[] trapsxy = new int[8]; // traps for (x-+) + (y-+)
        for(b = 0; b < traps.Length; b++){
            traps[b] = n;
        }
        traps[1] = 1;// its set to 0 as we are -- from the x or y
        traps[2] = 1; 
        for(b = 0; b < trapsxy.Length; b++){
            trapsxy[b] = n;
        }
        trapsxy[2] = 1;
        trapsxy[3] = 1;
        trapsxy[4] = 1;
        trapsxy[7] = 1;
        
        if (n == 1){ // chess is too small
            return 0;
        }
        if(n * n == k +1 ){ // Traps everywhere
            return 0;
        } 
        
        for ( b = 0; b < k; b++){
            if(obstacles[b][1] == c_q){ // check traps of c++ and c--
                if(obstacles[b][0] > r_q){
                    if(obstacles[b][0] -1 < traps[0] ){
                        traps[0] = obstacles[b][0] -1;
                    } else {
                        continue;
                    }
                } else {
                    if(obstacles[b][0] +1 > traps[1] ){
                        traps[1] = obstacles[b][0] +1;
                    } else {
                        continue;
                    }  
                }
            }
            if(obstacles[b][0] == r_q){ // check traps of r++ and r--
                if(obstacles[b][1] > c_q){
                    if(obstacles[b][1] -1 <traps[3]){
                        traps[3] = obstacles[b][1] -1;
                    } else {
                        continue;
                    }
                } else {
                    if(obstacles[b][1] +1 > traps[2]){
                        traps[2] = obstacles[b][1] +1;
                    } else {
                        continue;
                    } 
                }
            }
        }
        
        for( b = r_q+1 ; b <= traps[0]; b++){// c++
            count++;
        } 
        
         for( b = r_q-1; b >= traps[1]; b--){// c--
            count++;
        } 
        
        for( b = c_q -1; b >= traps[2]; b--){// r--
            count++;
        } 
        for( b = c_q+1; b <= traps[3]; b++){// r++
            
            count++;
        
        } 
        
        for ( b = 0; b < k; b++){
            if (obstacles[b][0] == r_q || obstacles[b][1] == c_q){
                continue;
            } else if(obstacles[b][0] < r_q && obstacles[b][1] < c_q) {
                if (r_q - obstacles[b][0] == c_q - obstacles[b][1]){
                    if (obstacles[b][0] +1 > trapsxy[2] && obstacles[b][1] +1 >trapsxy[3] ){
                        trapsxy[2] = obstacles[b][0] +1;
                        trapsxy[3] = obstacles[b][1] +1;
                    } else {
                        continue;
                    }
                    
                } else {
                    continue;
                }
            } else if(obstacles[b][0] > r_q && obstacles[b][1] > c_q) {
                if ( obstacles[b][0] - r_q ==  obstacles[b][1] - c_q){
                    if (obstacles[b][0] -1 < trapsxy[0] && obstacles[b][1] -1 < trapsxy[1]){
                        trapsxy[0] = obstacles[b][0] -1;
                        trapsxy[1] = obstacles[b][1] -1;
                    } else {
                        continue;
                    }
                    
                } else {
                    continue;
                }
            } else if(obstacles[b][0] < r_q && obstacles[b][1] > c_q) {
                if ( obstacles[b][0] - r_q == c_q - obstacles[b][1]){
                    if(obstacles[b][0] +1 > trapsxy[4] && obstacles[b][1] -1 <trapsxy[5] ){
                        trapsxy[4] = obstacles[b][0] +1;
                        trapsxy[5] = obstacles[b][1] -1;
                    } else {
                        continue;
                    }
                } else {
                    continue;
                }
            } else if(obstacles[b][0] > r_q && obstacles[b][1] < c_q) {
                if ( r_q - obstacles[b][0] == obstacles[b][1] - c_q){
                    if(obstacles[b][0] -1 <trapsxy[6] && obstacles[b][1] +1 > trapsxy[7]){
                        trapsxy[6] = obstacles[b][0] -1;
                        trapsxy[7] = obstacles[b][1] +1;
                    } else {
                        continue;
                    }
                    
                } else {
                    continue;
                }
            } 
        }
        
        for( b = 0; b < n; b++){ //r++ c++
           if ((r_q +1) +b <= trapsxy[0] && (c_q +1) +b <= trapsxy[1]){
               count++;
           } else {
               break;
           }
        } 
        for(b = 0; b < n; b++){// r-- c--
            if ((r_q -1) - b >= trapsxy[2] && (c_q -1) - b >= trapsxy[3]){
               count++;
            } else {
               break;
            }
        }  
        for( b = 0; b < n; b++){// r-- c++
            
            if ((r_q -1) - b >= trapsxy[4] && (c_q +1) + b <= trapsxy[5]){
               count++;
            } else {
               break;
            }
        
        }
        for( b = 0; b < n; b++){// r++ c--
            
            if ((r_q +1) + b <= trapsxy[6] && (c_q -1)  - b >= trapsxy[7]){
               count++;
            } else {
               break;
            }

        }
        return count;

    }

    static void Main(string[] args) {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        string[] nk = Console.ReadLine().Split(' ');

        int n = Convert.ToInt32(nk[0]);

        int k = Convert.ToInt32(nk[1]);

        string[] r_qC_q = Console.ReadLine().Split(' ');

        int r_q = Convert.ToInt32(r_qC_q[0]);

        int c_q = Convert.ToInt32(r_qC_q[1]);

        int[][] obstacles = new int[k][];

        for (int i = 0; i < k; i++) {
            obstacles[i] = Array.ConvertAll(Console.ReadLine().Split(' '), obstaclesTemp => Convert.ToInt32(obstaclesTemp));
        }

        int result = queensAttack(n, k, r_q, c_q, obstacles);

        textWriter.WriteLine(result);

        textWriter.Flush();
        textWriter.Close();
    }
}
